name: LearnStream Claude AI (PR/Issue/Comment)

on:
  workflow_dispatch:
    inputs:
      action:
        description: "open-issue | pr-comment | issue-comment | pr-code"
        required: true
        type: choice
        options: [open-issue, pr-comment, issue-comment, pr-code]
      target_repo:
        description: "owner/repo (defaults to current)"
        required: false
      number:
        description: "PR/Issue number (for comments/code)"
        required: false
      title:
        description: "Title (for open-issue)"
        required: false
      body:
        description: "Body text (markdown/code)"
        required: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Banner
        shell: bash
        run: |
          echo "=== LearnStream Claude AI — start === $(date -u +%FT%TZ)"
          echo "actor=${{ github.actor }}"
          echo "action=${{ github.event.inputs.action }}"
          echo "target_repo_input='${{ github.event.inputs.target_repo }}'"

      - name: Mint installation token (GitHub App)
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.CLAUDE_AI_APP_ID }}
          private_key: ${{ secrets.CLAUDE_AI_APP_PRIVATE_KEY }}
          installation_retrieval_mode: id
          installation_retrieval_payload: ${{ secrets.CLAUDE_AI_INSTALLATION_ID }}

      - name: Compute target repo
        id: target
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ github.event.inputs.target_repo }}" ]; then
            echo "repo=${{ github.repository }}" >> "$GITHUB_OUTPUT"
          else
            echo "repo=${{ github.event.inputs.target_repo }}" >> "$GITHUB_OUTPUT"
          fi
          echo "Using repo: ${{ steps.target.outputs.repo }}"

      - name: "Sanity: token + repo visibility (20s each)"
        shell: bash
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
          REPO:  ${{ steps.target.outputs.repo }}
        run: |
          set -euo pipefail
          echo "::group::rate_limit"
          timeout 20s curl -fsS -H "Authorization: token $TOKEN" https://api.github.com/rate_limit > /dev/null \
            || { echo "rate_limit check failed"; exit 1; }
          echo "rate_limit OK"
          echo "::endgroup::"
          echo "::group::repo GET"
          CODE=$(timeout 20s curl -fsS -o /tmp/repo.json -w "%{http_code}" \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO") || { echo "curl error repos/$REPO"; exit 1; }
          echo "HTTP $CODE"; head -c 300 /tmp/repo.json || true; echo
          [ "$CODE" = "200" ] || { echo "Installation token cannot access $REPO"; exit 1; }
          echo "::endgroup::"

      - name: Dispatch action (open-issue / pr-comment / issue-comment / pr-code)
        shell: bash
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
          REPO:  ${{ steps.target.outputs.repo }}
          ACT:   ${{ github.event.inputs.action }}
          NUM:   ${{ github.event.inputs.number }}
          TITLE: ${{ github.event.inputs.title }}
          BODY:  ${{ github.event.inputs.body }}
          ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail
          echo "Dispatching action: $ACT"

          # Build provenance block without timestamp/helper
          PVT="$(cat <<'EOF'
          <!-- AI-PROVENANCE: DO NOT EDIT -->
          assistant: Claude AI
          requested-by: @__ACTOR__
          EOF
          )"
          PVT="${PVT/__ACTOR__/${ACTOR}}"

          case "$ACT" in
            open-issue)
              [ -z "${TITLE}" ] && { echo "Missing 'title' for open-issue"; exit 1; }
              payload=$(jq -nc \
                --arg title "$TITLE" \
                --arg body  "$PVT\n\n${BODY:-}" \
                --arg actor "$ACTOR" \
                '{title:$title, body:$body, labels:["ai", ("by-" + $actor)]}')
              CODE=$(curl -fsS -o /tmp/out.json -w "%{http_code}" \
                -X POST -H "Authorization: token ${TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                -H "Content-Type: application/json" \
                --data "$payload" \
                "https://api.github.com/repos/${REPO}/issues")
              echo "HTTP $CODE"; cat /tmp/out.json
              [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ] || exit 1
              ;;

            pr-comment|issue-comment)
              [ -z "${NUM}" ] && { echo "Missing 'number' for ${ACT}"; exit 1; }
              payload=$(jq -nc \
                --arg b "$PVT\n\n${BODY:-}" \
                '{body:$b}')
              CODE=$(curl -fsS -o /tmp/out.json -w "%{http_code}" \
                -X POST -H "Authorization: token ${TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                -H "Content-Type: application/json" \
                --data "$payload" \
                "https://api.github.com/repos/${REPO}/issues/${NUM}/comments")
              echo "HTTP $CODE"; cat /tmp/out.json
              [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ] || exit 1
              ;;

            pr-code)
              [ -z "${NUM}" ] && { echo "Missing 'number' for pr-code"; exit 1; }
              payload=$(jq -nc \
                --arg b "$PVT\n\n\`\`\`diff\n${BODY:-}\n\`\`\`" \
                '{body:$b}')
              CODE=$(curl -fsS -o /tmp/out.json -w "%{http_code}" \
                -X POST -H "Authorization: token ${TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                -H "Content-Type: application/json" \
                --data "$payload" \
                "https://api.github.com/repos/${REPO}/pulls/${NUM}/comments")
              echo "HTTP $CODE"; cat /tmp/out.json
              [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ] || exit 1
              ;;

            *)
              echo "Unknown action: $ACT"; exit 1;;
          esac

      - name: Done
        run: echo "=== LearnStream Claude AI — done === $(date -u +%FT%TZ)"
